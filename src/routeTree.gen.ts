/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as RepositoriesRouteImport } from './routes/repositories'
import { Route as PaymentRouteImport } from './routes/payment'
import { Route as FruitsRouteImport } from './routes/fruits'
import { Route as FormRouteImport } from './routes/form'
import { Route as FetchDataRouteImport } from './routes/fetchData'
import { Route as IndexRouteImport } from './routes/index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const RepositoriesRoute = RepositoriesRouteImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentRoute = PaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const FruitsRoute = FruitsRouteImport.update({
  id: '/fruits',
  path: '/fruits',
  getParentRoute: () => rootRouteImport,
} as any)
const FormRoute = FormRouteImport.update({
  id: '/form',
  path: '/form',
  getParentRoute: () => rootRouteImport,
} as any)
const FetchDataRoute = FetchDataRouteImport.update({
  id: '/fetchData',
  path: '/fetchData',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/fetchData': typeof FetchDataRoute
  '/form': typeof FormRoute
  '/fruits': typeof FruitsRoute
  '/payment': typeof PaymentRoute
  '/repositories': typeof RepositoriesRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fetchData': typeof FetchDataRoute
  '/form': typeof FormRoute
  '/fruits': typeof FruitsRoute
  '/payment': typeof PaymentRoute
  '/repositories': typeof RepositoriesRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/fetchData': typeof FetchDataRoute
  '/form': typeof FormRoute
  '/fruits': typeof FruitsRoute
  '/payment': typeof PaymentRoute
  '/repositories': typeof RepositoriesRoute
  '/users': typeof UsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/fetchData'
    | '/form'
    | '/fruits'
    | '/payment'
    | '/repositories'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fetchData'
    | '/form'
    | '/fruits'
    | '/payment'
    | '/repositories'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/fetchData'
    | '/form'
    | '/fruits'
    | '/payment'
    | '/repositories'
    | '/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FetchDataRoute: typeof FetchDataRoute
  FormRoute: typeof FormRoute
  FruitsRoute: typeof FruitsRoute
  PaymentRoute: typeof PaymentRoute
  RepositoriesRoute: typeof RepositoriesRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/repositories': {
      id: '/repositories'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof RepositoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fruits': {
      id: '/fruits'
      path: '/fruits'
      fullPath: '/fruits'
      preLoaderRoute: typeof FruitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/form': {
      id: '/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof FormRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fetchData': {
      id: '/fetchData'
      path: '/fetchData'
      fullPath: '/fetchData'
      preLoaderRoute: typeof FetchDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FetchDataRoute: FetchDataRoute,
  FormRoute: FormRoute,
  FruitsRoute: FruitsRoute,
  PaymentRoute: PaymentRoute,
  RepositoriesRoute: RepositoriesRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
